<?php
/**
 * This file contains the implementation of the PersonToken entity class.
 *
 * @package    Pelagos\Entity
 * @subpackage PersonToken
 */

namespace Pelagos\Entity;

/**
 * Class to represent a person token.
 */
class PersonToken extends Entity
{
    /**
     * Static array containing a list of the properties and their attributes.
     *
     * Used by common update code.
     *
     * @var array $properties
     */
    protected static $properties = array(
        'person' => array(
            'type' => 'object',
            'class' => 'Pelagos\Entity\Person',
            'entity' => 'Person',
            'setter' => 'setPerson',
            'getter' => 'getPerson',
        ),
        'tokenText' => array(
            'type' => 'string',
            'getter' => 'getTokenText',
        ),
        'use'   => array(
            'type' => 'string',
            'setter' => 'setUse',
            'getter' => 'getUse',
        ),
    );

    /**
     * Person entity this PersonToken belongs to.
     *
     * @var Person
     *
     * @Assert\NotBlank(
     *     message="Person is required"
     * )
     */
    protected $person;

    /**
     * PersonToken's text string.
     *
     * @var string
     *
     * @Assert\NotBlank(
     *     message="Token text is required."
     * )
     */
    protected $tokenText;

    /**
     * PersonToken's use string.
     *
     * @var string
     *
     * @Assert\NotBlank(
     *     message="Token use is required."
     * )
     */
    protected $use;

    /**
     * Constructor for PersonToken.
     */
    public function __construct()
    {
        $this->generateTokenText();
    }

    /**
     * Setter for Person.
     *
     * @param Person|null $person The Person entity this token belongs to.
     *
     * @return void
     */
    public function setPerson(Person $person = null)
    {
        $this->person = $person;
    }

    /**
     * Getter for Person.
     *
     * @return Person|null The Person entity this token belongs to.
     */
    public function getPerson()
    {
        return $this->person;
    }

    /**
     * Getter for tokenText property.
     *
     * @access public
     *
     * @return string Token text for a PersonToken entity.
     */
    public function getTokenText()
    {
        return $this->tokenText;
    }

    /**
     * Setter for use.
     *
     * @param string $use String enumerating token usage.
     *
     * @return void
     */
    public function setUse($use)
    {
        $this->use = $use;
    }

    /**
     * Getter for use.
     *
     * @return string String enumerating token usage.
     */
    public function getUse()
    {
        return $this->use;
    }

    /**
     * Generate a random token and save it as a hexadecimal string.
     *
     * @access public
     *
     * @throws \Exception When unable to generate a cryptographically strong token.
     *
     * @return void
     */
    public function generateTokenText()
    {
        // Assume the token is not crptographically strong by default.
        $cryptoStrong = false;
        // Attempt to generate a cryptographically strong 32 byte random byte string.
        $randomBytes = openssl_random_pseudo_bytes(32, $cryptoStrong);
        // If the generated byte string is not cryptographically strong.
        if (!$cryptoStrong) {
            throw new \Exception('Could not generate a cryptographically strong token');
        }
        // Encode the byte string as hex, and save it as the token text.
        $this->tokenText = bin2hex($randomBytes);
    }
}
