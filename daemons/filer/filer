#!/usr/bin/perl -w

use strict;
use Config::PHPINI;
use DBI;
use Mail::Sendmail;
use File::Copy;
use Net::LDAP;
use MIME::Lite;
use MIME::Types qw(by_suffix);
use POSIX qw(strftime);
use IO::Handle;

my $config = Config::PHPINI->read('/etc/griidc/filer.ini');

my $logfile  = '/var/log/griidc/filer';
open(my $log,'>>',$logfile) or die "cannot open log file $logfile: $!";
chmod 0644, $logfile;
$log->autoflush(1);

writelog($log,"filer starting");

my $types = Config::PHPINI->read('/etc/griidc/filetypes.ini');

my $db_conf = Config::PHPINI->read('/etc/griidc/db.ini');
my %dbi_type_map = ('postgresql' => 'Pg', 'mysql' => 'mysql');
my %db = %{$db_conf->{'GOMRI_RW'}};

my %notify;

my $dbh = DBI->connect("DBI:$dbi_type_map{$db{type}}:host=$db{host};port=$db{port};dbname=$db{dbname};",$db{'username'},$db{'password'},{'RaiseError' => 1});
my $sth;

# get all registry entries with url_data set, data_source_pull = true, and no download status
$sth = $dbh->prepare("SELECT registry_id, dataset_udi, url_data, userid, dataset_title
                      FROM registry r
                      INNER JOIN (
                                  SELECT MAX(registry_id) AS MaxID
                                  FROM registry
                                  GROUP BY substr(registry_id,1,16)
                                 ) m
                      ON r.registry_id = m.MaxID
                      WHERE
                          substr(registry_id,1,2) != '00' AND
                          data_source_pull = 'true' AND
                          dataset_download_status = 'no_status' AND
                          url_data IS NOT NULL AND
                          url_data != ''
                      ORDER BY dataset_udi");
$sth->execute();

my (%data_remote, %data_unknown, %data_missing, %data_filed);

# loop through all entries that need processing for data
while (my $r = $sth->fetchrow_hashref()) {

    my $udi = $r->{'dataset_udi'};
    my $reg_id = $r->{'registry_id'};
    my $url_data = $r->{'url_data'};

    # check if url is remote
    if ($url_data =~ /^(https?|ftp):\/\//) {
        $data_remote{$reg_id} = $url_data;
        next;
    }

    # check if url is some unknown protocol (anything other than file://)
    if ($url_data !~ /^file:\/\//) {
        $data_unknown{$reg_id} = $url_data;
        next;
    }

    # get filepath from url
    my $filepath = $url_data;
    $filepath =~ s/^file:\/\///;

    # check if file exists
    if (! -f $filepath) {
        $data_missing{$reg_id} = $url_data;
        next;
    }

    # check if data store directory exists for this udi
    if (! -d "$config->{paths}->{data_store}/$udi") {
        mkdir("$config->{paths}->{data_store}/$udi") or die "Error: could not create directory: $config->{paths}->{data_store}/$udi ($!)\n";
    }

    # copy data file to data store
    copy($filepath,"$config->{paths}->{data_store}/$udi/$udi.dat") or die "Error: could not copy file ($!)\n";
    $data_filed{$reg_id} = "$config->{paths}->{data_store}/$udi/$udi.dat";

    # update dataset_filename (original filename), dataset_download_size, and dataset_download_status
    my $filename = $url_data;
    $filename =~ s/.*\///;
    my $filesize = -s "$config->{paths}->{data_store}/$udi/$udi.dat";
    my $sth2 = $dbh->prepare("UPDATE registry SET dataset_filename = ?, dataset_download_size = ?, dataset_download_status = ? WHERE registry_id = ?;");
    $sth2->execute($filename,$filesize,'done',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;

    # set parameters for submitter notification
    $notify{$r->{'userid'}}->{'data'} = [] unless exists $notify{$r->{'userid'}}->{'data'};
    push(@{$notify{$r->{'userid'}}->{'data'}}, { udi => $udi, title => $r->{'dataset_title'}, filename => $filename });

}


# get all registry entries with url_metadata set, and no metadata download status
$sth = $dbh->prepare("SELECT registry_id, dataset_udi, url_metadata, userid, dataset_title
                      FROM registry r
                      INNER JOIN (
                                  SELECT MAX(registry_id) AS MaxID
                                  FROM registry
                                  GROUP BY substr(registry_id,1,16)
                                 ) m
                      ON r.registry_id = m.MaxID
                      WHERE
                          substr(registry_id,1,2) != '00' AND
                          metadata_dl_status = 'None' AND
                          url_metadata IS NOT NULL AND
                          url_metadata != ''
                      ORDER BY dataset_udi");
$sth->execute();

my (%md_remote, %md_unknown, %md_missing, %md_filed, @md_approve);

# loop through all entries that need processing for metadata
while (my $r = $sth->fetchrow_hashref()) {

    my $udi = $r->{'dataset_udi'};
    my $reg_id = $r->{'registry_id'};
    my $url_metadata = $r->{'url_metadata'};

    # check if url is remote
    if ($url_metadata =~ /^(https?|ftp):\/\//) {
        $md_remote{$reg_id} = $url_metadata;
        next;
    }

    # check if url is some unknown protocol (anything other than file://)
    if ($url_metadata !~ /^file:\/\//) {
        $md_unknown{$reg_id} = $url_metadata;
        next;
    }

    # get filepath from url
    my $filepath = $url_metadata;
    $filepath =~ s/^file:\/\///;

    # check if file exists
    if (! -f $filepath) {
        $md_missing{$reg_id} = $url_metadata;
        next;
    }

    # check if data store directory exists for this udi
    if (! -d "$config->{paths}->{data_store}/$udi") {
        mkdir("$config->{paths}->{data_store}/$udi") or die "Error: could not create directory: $config->{paths}->{data_store}/$udi ($!)\n";
    }

    # copy metadata file to data store
    copy($filepath,"$config->{paths}->{data_store}/$udi/$udi.met") or die "Error: could not copy file ($!)\n";
    $md_filed{$reg_id} = "$config->{paths}->{data_store}/$udi/$udi.met";

    # update dataset_metadata (original filename), metadata_dl_status, and metadata_status
    my $filename = $url_metadata;
    $filename =~ s/.*\///;
    my $sth2 = $dbh->prepare("UPDATE registry SET dataset_metadata = ?, metadata_dl_status = ?, metadata_status = ? WHERE registry_id = ?;");
    $sth2->execute($filename,'Completed','Submitted',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;

    # set parameters for submitter notification
    $notify{$r->{'userid'}}->{'metadata'} = [] unless exists $notify{$r->{'userid'}}->{'metadata'};
    push(@{$notify{$r->{'userid'}}->{'metadata'}}, { udi => $udi, title => $r->{'dataset_title'}, filename => $filename });
    push(@md_approve, { udi => $udi, title => $r->{'dataset_title'}, filename => $filename });

}

$dbh->disconnect();

my $ldap = Net::LDAP->new('triton.tamucc.edu') or die "$@";

my $mesg = $ldap->bind;

my $table_style = 'border-collapse: collapse;';
my $th_style = 'padding: 3px; text-align: center;';
my $td_style = 'border: 1px solid black; padding: 3px; vertical-align: top;';

# notify submitters (FILER-5 and FILER-8)
for my $uid (keys %notify) {

    $mesg = $ldap->search(
          base => "ou=members,ou=people,dc=griidc,dc=org",
        filter => "(uid=$uid)",
         attrs => ['mail','cn']
    );

    $mesg->code && die $mesg->error;

    my ($email,$cn);

    if ($mesg->entries) {
        my @entries = $mesg->entries;
        $email = $entries[0]->get_value('mail');
        $cn = $entries[0]->get_value('cn');
    }

    next unless $email;

    my %mail = (      To => $email,
                    From => 'GRIIDC <griidc@gomri.org>',
                 Subject => 'GRIIDC Registration Summary',
                 Message => '',
                 'content-type' => 'text/html; charset="iso-8859-1"'
               );

    $mail{'To'} = "$cn <$email>" if $cn;

    $mail{'Message'} .= "<p>Dear $cn,</p>\n" if $cn;

    $mail{'Message'} .= "<p>Thank you for registering your";

    if (exists $notify{$uid}->{'data'}) {
        if (@{$notify{$uid}->{'data'}} > 1) {
            $mail{'Message'} .= ' datasets';
        }
        else {
            $mail{'Message'} .= ' dataset';
        }
        $mail{'Message'} .= ' and' if exists $notify{$uid}->{'metadata'};
    }

    if (exists $notify{$uid}->{'metadata'}) {
        $mail{'Message'} .= ' metadata';
    }

    $mail{'Message'} .= " with the Gulf of Mexico Research Initiative Information and Data Cooperative (GRIIDC).</p>",

    $mail{'Message'} .= "\n\n<table style='$table_style'>";

    # notify submitter about processed data files
    if (exists $notify{$uid}->{'data'}) {
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <td colspan='4' style='border:none; padding-bottom: 0.5em;'>The following";
        if (@{$notify{$uid}->{'data'}} > 1) {
            $mail{'Message'} .= ' datasets have';
        }
        else {
            $mail{'Message'} .= ' dataset has';
        }
        $mail{'Message'} .= " been processed and can now be viewed:</td>";
        $mail{'Message'} .= "\n    </tr>";
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <th style='$th_style width: 400px;'>Dataset Title</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Dataset Filename</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>UDI</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Link</th>";
        $mail{'Message'} .= "\n    </tr>";
        for my $ds (@{$notify{$uid}->{'data'}}) {
            $mail{'Message'} .= "\n    <tr>";
            $mail{'Message'} .= "\n        <td style='$td_style width: 400px;'>$ds->{title}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{filename}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{udi}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'><a href='https://data.gulfresearchinitiative.org/data/$ds->{udi}'>https://data.gulfresearchinitiative.org/data/$ds->{udi}</a></td>";
            $mail{'Message'} .= "\n    </tr>";
        }
    }

    # notify submitter about processed metadata files
    if (exists $notify{$uid}->{'metadata'}) {
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <td colspan='4' style='border:none; padding-top: 1.5em; padding-bottom: 0.5em;'>The following";
        if (@{$notify{$uid}->{'metadata'}} > 1) {
            $mail{'Message'} .= ' metadata records have';
        }
        else {
            $mail{'Message'} .= ' metadata record has';
        }
        $mail{'Message'} .= " been processed and can now be viewed:</td>";
        $mail{'Message'} .= "\n    </tr>";
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <th style='$th_style width: 400px;'>Dataset Title</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Metadata Filename</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>UDI</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Link</th>";
        $mail{'Message'} .= "\n    </tr>";
        for my $ds (@{$notify{$uid}->{'metadata'}}) {
            $mail{'Message'} .= "\n    <tr>";
            $mail{'Message'} .= "\n        <td style='$td_style width: 400px;'>$ds->{title}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{filename}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{udi}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'><a href='https://data.gulfresearchinitiative.org/data/$ds->{udi}'>https://data.gulfresearchinitiative.org/data/$ds->{udi}</a></td>";
            $mail{'Message'} .= "\n    </tr>";
        }
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <td colspan='4' style='border:none; padding-top: 0.5em;'>";
        if (@{$notify{$uid}->{'metadata'}} > 1) {
            $mail{'Message'} .= 'These metadata records';
        }
        else {
            $mail{'Message'} .= 'This metadata record';
        }
        $mail{'Message'} .= " will now go through the GRIIDC approval process and you will be notified once";
        if (@{$notify{$uid}->{'metadata'}} > 1) {
            $mail{'Message'} .= ' these records have';
        }
        else {
            $mail{'Message'} .= ' this record has';
        }
        $mail{'Message'} .= " been approved.</td>";
        $mail{'Message'} .= "\n    </tr>";
    }

    $mail{'Message'} .= "\n</table>";

    $mail{'Message'} .= "\n\n<p>If you have any questions or concerns please contact GRIIDC at <a href='mailto:griidc\@gomri.org'>griidc\@gomri.org</a>.</p>";
    $mail{'Message'} .= "\n\n<p>Thank you,<br>";
    $mail{'Message'} .= "\nThe GRIIDC team</p>";

    sendmail(%mail) or die $Mail::Sendmail::error;
}

# notify internal users
for my $email (keys %{$config->{'notifications'}}) {
    my @types = split /[, ]/, $config->{'notifications'}->{$email};
    writelog($log,"notifying $email - ".join(',',@types));
    my $msg;

    my %mail = ( To      => $email,
                 From    => 'GRIIDC Filer <filer@poseidon.tamucc.edu>',
                 Subject => "Filer Summary",
                 Message => '',
                 'content-type' => 'text/plain; charset="iso-8859-1"'
               );

    for my $type (@types) {
        if ($type eq 'filed') {
            if (%data_filed) {
                $mail{'Message'} .= "\nFiled Data Files:\n\n";
                for my $reg_id (sort(keys(%data_filed))) {
                    $mail{'Message'} .= "$reg_id $data_filed{$reg_id}\n";
                }
            }
            if (%md_filed) {
                $mail{'Message'} .= "\nFiled Metadata Files:\n\n";
                for my $reg_id (sort(keys(%md_filed))) {
                    $mail{'Message'} .= "$reg_id $md_filed{$reg_id}\n";
                }
            }
        }
        if ($type eq 'remote') {
            if (%data_remote) {
                $mail{'Message'} .= "\nRemote Data Files (manual retrieval required):\n\n";
                for my $reg_id (sort(keys(%data_remote))) {
                    $mail{'Message'} .= "$reg_id $data_remote{$reg_id}\n";
                }
            }
            if (%md_remote) {
                $mail{'Message'} .= "\nRemote Metadata Files (manual retrieval required):\n\n";
                for my $reg_id (sort(keys(%md_remote))) {
                    $mail{'Message'} .= "$reg_id $md_remote{$reg_id}\n";
                }
            }
        }
        if ($type eq 'unknown') {
            if (%data_unknown) {
                $mail{'Message'} .= "\nUnknown Protocol (Data Files):\n\n";
                for my $reg_id (sort(keys(%data_unknown))) {
                    $mail{'Message'} .= "$reg_id $data_unknown{$reg_id}\n";
                }
            }
            if (%md_unknown) {
                $mail{'Message'} .= "\nUnknown Protocol (Metadata Files):\n\n";
                for my $reg_id (sort(keys(%md_unknown))) {
                    $mail{'Message'} .= "$reg_id $md_unknown{$reg_id}\n";
                }
            }
        }
        if ($type eq 'missing') {
            if (%data_missing) {
                $mail{'Message'} .= "\nMissing Data Files:\n\n";
                for my $reg_id (sort(keys(%data_missing))) {
                    $mail{'Message'} .= "$reg_id $data_missing{$reg_id}\n";
                }
            }
            if (%md_missing) {
                $mail{'Message'} .= "\nMissing Metadata Files:\n\n";
                for my $reg_id (sort(keys(%md_missing))) {
                    $mail{'Message'} .= "$reg_id $md_missing{$reg_id}\n";
                }
            }
        }
    }

    if (length $mail{'Message'}) {
        my $subject = "Filer Summary";
        $mail{'Message'} = "Filer Summary\n$mail{Message}";
        sendmail(%mail) or die $Mail::Sendmail::error;
    }
}

# find all metadata reviewers
$mesg = $ldap->search(
      base => "ou=Metadata,ou=applications,dc=griidc,dc=org",
    filter => "(cn=reviewers)",
     attrs => ['member']
);
$mesg->code && die $mesg->error;
my @members;
if ($mesg->entries) {
    my @entries = $mesg->entries;
    @members = $entries[0]->get_value('member');
}

# get emails for all metadata reviewers
my @md_approver_emails;
for my $reviewer (@members) {
    $mesg = $ldap->search(
          base => $reviewer,
        filter => '(objectClass=*)',
         attrs => ['mail']
    );
    $mesg->code && die $mesg->error;
    my $email;
    if ($mesg->entries) {
        my @entries = $mesg->entries;
        $email = $entries[0]->get_value('mail');
    }
    push @md_approver_emails, $email if $email;
}

# connect to RIS
my %ris_db = %{$db_conf->{'RIS_RO'}};
my $ris_dbh = DBI->connect("DBI:$dbi_type_map{$ris_db{type}}:host=$ris_db{host};port=$ris_db{port};dbname=$ris_db{dbname};",$ris_db{'username'},$ris_db{'password'},{'RaiseError' => 1});
my $ris_sth;

# send metadata to metadata approvers
for my $md (@md_approve) {
    my $project_title;
    my ($project_id) = $md->{'udi'} =~ /[^\.]+\.x(\d+)/;
    $ris_sth = $ris_dbh->prepare("SELECT Program_Title FROM Programs WHERE Program_ID = $project_id;");
    $ris_sth->execute();
    my $proj = $ris_sth->fetchrow_hashref();
    $project_title = $proj->{'Program_Title'};

    my $task_title;
    my ($task_id) = $md->{'udi'} =~ /[^\.]+\.x\d+\.(\d+)/;
    if ($task_id ne '000') {
        $ris_sth = $ris_dbh->prepare("SELECT Project_Title FROM Projects WHERE Project_ID = $task_id;");
        $ris_sth->execute();
        my $task = $ris_sth->fetchrow_hashref();
        $task_title = $task->{'Project_Title'};
    }

    my $msg = MIME::Lite->new(
        From    => 'GRIIDC Filer <filer@poseidon.tamucc.edu>',
        To      => join(',',@md_approver_emails),
        Subject => "New metadata file for $md->{udi}",
        Type    => 'multipart/mixed',
    );

    my $text = "A new metadata file for $md->{udi} has been submitted:";
    $text .= "\n\nFilename: $md->{filename}";
    $text .= "\nUDI: $md->{udi}";
    $text .= "\nDataset Title: $md->{title}";
    $text .= "\nProject: $project_title";
    $text .= "\nTask: $task_title" if $task_title;
    $text .= "\n\nThe metadata file is attached.";

    $msg->attach(
        Type => 'TEXT',
        Data => $text
    );

    my ($mime_type, $encoding) = by_suffix($md->{'filename'});

    $mime_type = 'application/octet-stream' unless $mime_type;

    $msg->attach(
            Type => $mime_type,
            Path => "$config->{paths}->{data_store}/$md->{udi}/$md->{udi}.met",
        Filename => $md->{'filename'}
    );

    $ENV{'PATH'} = '/usr/sbin';
    $msg->send;
}

writelog($log,"filer finished");
close $log;

sub writelog {
    my ($log,$message) = @_;
    my $ts = POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime);
    print $log "[$ts] $message\n";
}
