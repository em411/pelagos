#!/usr/bin/perl -w

use strict;
use Config::PHPINI;
use DBI;
use Mail::Sendmail;
use File::Copy;
use Net::LDAP;
use POSIX qw(strftime);
use IO::Handle;
use LWP::UserAgent;
use File::Fetch;

$File::Fetch::BLACKLIST = [qw|lwp httplite|];

umask 0022;

my $conf = Config::PHPINI->read('/etc/griidc.ini');
my $conf_notifications = Config::PHPINI->read('/etc/griidc/notifications.ini');
$conf->{'notifications'} = $conf_notifications->{'retriever'} if exists $conf_notifications->{'retriever'};

my $logfile  = "$conf->{paths}->{log}/retriever_data";

open(my $log,'>>',$logfile) or die "cannot open log file $logfile: $!";
$log->autoflush(1);

writelog($log,"retriever starting");

my $types = Config::PHPINI->read('/etc/griidc/filetypes.ini');

my $db_conf = Config::PHPINI->read('/etc/griidc/db.ini');
my %dbi_type_map = ('postgresql' => 'Pg', 'mysql' => 'mysql');
my %db = %{$db_conf->{'GOMRI_RW'}};

my %notify;

my $dbh = DBI->connect("DBI:$dbi_type_map{$db{type}}:host=$db{host};port=$db{port};dbname=$db{dbname};",$db{'username'},$db{'password'},{'RaiseError' => 1});
my $sth;

# get all registry entries with url_data set, data_source_pull = true, and no download status
$sth = $dbh->prepare("SELECT registry_id, dataset_udi, url_data, userid, dataset_title, access_status, dataset_filename
                      FROM registry r
                      INNER JOIN (
                                  SELECT MAX(registry_id) AS MaxID
                                  FROM registry
                                  GROUP BY substr(registry_id,1,16)
                                 ) m
                      ON r.registry_id = m.MaxID
                      WHERE
                          substr(registry_id,1,2) != '00' AND
                          (dataset_download_status = 'no_status' OR dataset_download_status = 'None') AND
                          (url_data LIKE 'http://%' OR
                           url_data LIKE 'https://%' OR
                           url_data LIKE 'ftp://%')
                      ORDER BY dataset_udi");
$sth->execute();

my $data_notify = {};

my $ua = LWP::UserAgent->new;
$ua->cookie_jar({});

# loop through all entries that have remote data
while (my $r = $sth->fetchrow_hashref()) {

    my $udi = $r->{'dataset_udi'};
    my $reg_id = $r->{'registry_id'};
    my $url_data = $r->{'url_data'};

    # check if we have a valid registry id
    if ($reg_id !~ /^[YR]\d\.x\d\d\d.\d\d\d:\d\d\d\d\.\d\d\d$/) {
        $data_notify->{'bad_reg_id'}->{$reg_id} = $reg_id;
        next;
    }

    # check if we have a valid udi
    if ($udi !~ /^[YR]\d\.x\d\d\d.\d\d\d:\d\d\d\d$/) {
        $data_notify->{'bad_udi'}->{$reg_id} = $udi;
        next;
    }

    if ($url_data =~ /^http/) {

        my $response = $ua->head($url_data);
 
        if ($response->is_success) {

            my $type = $response->header('content-type');

            if ($type =~ /^text\/html/) {
                # mark as html for further review
                $data_notify->{'html'}->{$reg_id} = $url_data;
                writelog($log,"[$udi] remote file at $url_data resolves to HTML page.");
                next;
            }

            my $filename;

            # if filename is already set in DB, use it
            $filename = $r->{'dataset_filename'} if $r->{'dataset_filename'};

            # if we don't have a filename, try to get it from the HTTP header
            unless ($filename) {
                my $cd = $response->header('content-disposition');
                ($filename) = $cd =~ /filename="([^"]+)"/ if $cd;
            }

            # if we still don't have a filename, try to get it from the URL
            unless ($filename) {
                $filename = $url_data;
                $filename =~ s/.*\///;
            }

            # if we still don't have a filename, give up and report it
            unless ($filename) {
                writelog($log,"[$udi] could not determine filename from $url_data");
                $data_notify->{'error'}->{$reg_id} = { url => $url_data, status => 'could not determine filename' };
                next;
            }

            writelog($log,"[$udi] fetching $url_data as $filename");
            my $ff = File::Fetch->new( uri => $url_data );
            my $filepath = $ff->fetch( to => '/tmp/retriever' );

            # check if data store directory exists for this udi
            if (! -d "$conf->{paths}->{data_store}/$udi") {
                writelog($log,"[$udi] creating data store directory ($conf->{paths}->{data_store}/$udi)");
                mkdir("$conf->{paths}->{data_store}/$udi") or die "Error: could not create directory: $conf->{paths}->{data_store}/$udi ($!)\n";
            }

            # copy data file to data store
            writelog($log,"[$udi] copying data file to data store (cp \"$filepath\" \"$conf->{paths}->{data_store}/$udi/$udi.dat\")");
            copy($filepath,"$conf->{paths}->{data_store}/$udi/$udi.dat") or die "Error: could not copy file ($!)\n";
            $data_notify->{'filed'}->{$reg_id} = { url => $url_data, path => "$conf->{paths}->{data_store}/$udi/$udi.dat" };

            # update dataset_filename (original filename), dataset_download_size, and dataset_download_status
            my $filesize = -s "$conf->{paths}->{data_store}/$udi/$udi.dat";
            my $sth2 = $dbh->prepare("UPDATE registry SET dataset_filename = ?, dataset_download_size = ?, dataset_download_status = ? WHERE registry_id = ?;");
            writelog($log,"[$udi] updating dataset_filename, dataset_download_size, and dataset_download_status");
            $sth2->execute($filename,$filesize,'done',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;

            # set parameters for submitter notification
            $notify{$r->{'userid'}}->{'data'} = [] unless exists $notify{$r->{'userid'}}->{'data'};
            push(@{$notify{$r->{'userid'}}->{'data'}}, { udi => $udi, title => $r->{'dataset_title'}, filename => $filename });

        }
        else {
            if ($response->status_line =~ /^403/) {
                my $sth2 = $dbh->prepare("UPDATE registry SET dataset_download_status = ?, access_status = ? WHERE registry_id = ?;");
                if ($r->{'access_status'} eq 'Approval') {
                    writelog($log,"[$udi] remote file at $url_data is restricted. Setting dataset_download_status = 'RemotelyHosted' and access_status = 'Approval'.");
                    $sth2->execute('RemotelyHosted','Approval',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;
                    $data_notify->{'restricted'}->{$reg_id}->{'type'} = 'Approval';
                }
                else {
                    writelog($log,"[$udi] remote file at $url_data is restricted. Setting dataset_download_status = 'RemotelyHosted' and access_status = 'Restricted'.");
                    $sth2->execute('RemotelyHosted','Restricted',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;
                    $data_notify->{'restricted'}->{$reg_id}->{'type'} = 'Restricted';
                }
                $data_notify->{'restricted'}->{$reg_id}->{'url'} = $url_data;
            }
            else {
                my $sth2 = $dbh->prepare("UPDATE registry SET dataset_download_status = ? WHERE registry_id = ?;");
                writelog($log,"[$udi] failed to download data file from $url_data (" . $response->status_line . ")");
                $sth2->execute('dl_error',$reg_id) or die "Couldn't execute statement: " . $sth2->errstr;
                $data_notify->{'error'}->{$reg_id} = { url => $url_data, status => $response->status_line };
            }
        }

    }

}

$dbh->disconnect();

my $ldap = Net::LDAP->new('triton.tamucc.edu') or die "$@";

my $mesg = $ldap->bind;

my $table_style = 'border-collapse: collapse;';
my $th_style = 'padding: 3px; text-align: center;';
my $td_style = 'border: 1px solid black; padding: 3px; vertical-align: top;';

# notify submitters
for my $uid (keys %notify) {

    $mesg = $ldap->search(
          base => "ou=members,ou=people,dc=griidc,dc=org",
        filter => "(uid=$uid)",
         attrs => ['mail','cn']
    );

    $mesg->code && die $mesg->error;

    my ($email,$cn);

    if ($mesg->entries) {
        my @entries = $mesg->entries;
        $email = $entries[0]->get_value('mail');
        $cn = $entries[0]->get_value('cn');
    }

    next unless $email;

    my %mail = (      To => $email,
                    From => 'GRIIDC <griidc@gomri.org>',
                 Subject => 'GRIIDC Registration Summary',
                 Message => '',
                 'content-type' => 'text/html; charset="iso-8859-1"'
               );

    $mail{'To'} = "$cn <$email>" if $cn;

    $mail{'Message'} .= "<p>Dear $cn,</p>\n" if $cn;

    $mail{'Message'} .= "<p>Thank you for registering your";

    if (exists $notify{$uid}->{'data'}) {
        if (@{$notify{$uid}->{'data'}} > 1) {
            $mail{'Message'} .= ' datasets';
        }
        else {
            $mail{'Message'} .= ' dataset';
        }
        $mail{'Message'} .= ' and' if exists $notify{$uid}->{'metadata'};
    }

    if (exists $notify{$uid}->{'metadata'}) {
        $mail{'Message'} .= ' metadata';
    }

    $mail{'Message'} .= " with the Gulf of Mexico Research Initiative Information and Data Cooperative (GRIIDC).</p>",

    $mail{'Message'} .= "\n\n<table style='$table_style'>";

    # notify submitter about processed data files
    if (exists $notify{$uid}->{'data'}) {
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <td colspan='4' style='border:none; padding-bottom: 0.5em;'>The following";
        if (@{$notify{$uid}->{'data'}} > 1) {
            $mail{'Message'} .= ' datasets have';
        }
        else {
            $mail{'Message'} .= ' dataset has';
        }
        $mail{'Message'} .= " been processed and can now be viewed:</td>";
        $mail{'Message'} .= "\n    </tr>";
        $mail{'Message'} .= "\n    <tr>";
        $mail{'Message'} .= "\n        <th style='$th_style width: 400px;'>Dataset Title</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Dataset Filename</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>UDI</th>";
        $mail{'Message'} .= "\n        <th style='$th_style'>Link</th>";
        $mail{'Message'} .= "\n    </tr>";
        for my $ds (@{$notify{$uid}->{'data'}}) {
            $mail{'Message'} .= "\n    <tr>";
            $mail{'Message'} .= "\n        <td style='$td_style width: 400px;'>$ds->{title}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{filename}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'>$ds->{udi}</td>";
            $mail{'Message'} .= "\n        <td style='$td_style'><a href='https://data.gulfresearchinitiative.org/data/$ds->{udi}'>https://data.gulfresearchinitiative.org/data/$ds->{udi}</a></td>";
            $mail{'Message'} .= "\n    </tr>";
        }
    }

    $mail{'Message'} .= "\n</table>";

    $mail{'Message'} .= "\n\n<p>If you have any questions or concerns please contact GRIIDC at <a href='mailto:griidc\@gomri.org'>griidc\@gomri.org</a>.</p>";
    $mail{'Message'} .= "\n\n<p>Thank you,<br>";
    $mail{'Message'} .= "\nThe GRIIDC team</p>";

    writelog($log,"sending confirmation of processed files to submitter ($mail{To})");
    sendmail(%mail) or die $Mail::Sendmail::error;
}

# notify internal users
for my $email (keys %{$conf->{'notifications'}}) {
    my @types = split /[, ]/, $conf->{'notifications'}->{$email};
    my $msg;

    my %mail = ( To      => $email,
                 From    => 'GRIIDC Retriever <retriever@poseidon.tamucc.edu>',
                 Subject => "Retriever Summary",
                 Message => '',
                 'content-type' => 'text/plain; charset="iso-8859-1"'
               );

    for my $type (@types) {
        if ($type eq 'filed') {
            if (exists $data_notify->{'filed'}) {
                $mail{'Message'} .= "\nRetrieved and Filed Data Files:\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'filed'}}))) {
                    $mail{'Message'} .= "$reg_id $data_notify->{filed}->{$reg_id}->{url} => $data_notify->{filed}->{$reg_id}->{path}\n";
                }
            }
        }
        if ($type eq 'bad') {
            if (exists $data_notify->{'bad_reg_id'}) {
                $mail{'Message'} .= "\nBad Registry IDs (data):\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'bad_reg_id'}}))) {
                    $mail{'Message'} .= "$reg_id\n";
                }
            }
            if (exists $data_notify->{'bad_udi'}) {
                $mail{'Message'} .= "\nBad UDIs (data):\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'bad_udi'}}))) {
                    $mail{'Message'} .= "$reg_id $data_notify->{bad_udi}->{$reg_id}\n";
                }
            }
        }
        if ($type eq 'html') {
            if (exists $data_notify->{'html'}) {
                $mail{'Message'} .= "\nData URLs that resolved to HTML pages:\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'html'}}))) {
                    $mail{'Message'} .= "$reg_id $data_notify->{html}->{$reg_id}\n";
                }
            }
        }
        if ($type eq 'error') {
            if (exists $data_notify->{'error'}) {
                $mail{'Message'} .= "\nData URLs that could not be downloaded due to an error:\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'error'}}))) {
                    $mail{'Message'} .= "$reg_id $data_notify->{error}->{$reg_id}->{url} $data_notify->{error}->{$reg_id}->{status}\n";
                }
            }
        }
        if ($type eq 'restricted') {
            if (exists $data_notify->{'restricted'}) {
                $mail{'Message'} .= "\nData URLs that could not be downloaded because they are restricted:\n\n";
                for my $reg_id (sort(keys(%{$data_notify->{'restricted'}}))) {
                    $mail{'Message'} .= "$reg_id $data_notify->{restricted}->{$reg_id}->{url} $data_notify->{restricted}->{$reg_id}->{type}\n";
                }
            }
        }
    }

    if (length $mail{'Message'}) {
        my $subject = "Retriever Summary";
        $mail{'Message'} = "Retriever Summary\n$mail{Message}";
        writelog($log,'sending retriever summary (' . join(',',@types) . ") to: $mail{To}");
        sendmail(%mail) or die $Mail::Sendmail::error;
    }
}

writelog($log,"retriever finished");
close $log;

sub writelog {
    my ($log,$message) = @_;
    my $ts = POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime);
    print $log "[$ts] $message\n";
}
