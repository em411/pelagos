#!/usr/bin/perl

use Config::Tiny;
use XML::Simple;
use DBI;
use LWP::Simple;
use Getopt::Std;
use POSIX;
use Mail::Sendmail;

my $config = Config::Tiny->read('/etc/griidc/dif-creator.ini');

my $logfile  = '/var/log/griidc/dif-creator';
open(my $log,'>>',$logfile) or die "cannot open log file $logfile: $!";

my %opts;
getopts('f:',\%opts);

my $xml = XML::Simple->new(ForceArray => ['entry','format','category','procedure','transport','national_data_center'], KeyAttr =>[]);

my $data;
my $source;

if (defined $opts{'f'}) {
    $source = $opts{'f'};
    $data = $xml->XMLin($opts{'f'});
}
else {
    $source = $ARGV[0];
    writelog($log,"retrieving: $ARGV[0]");
    my $dif_xml = get $ARGV[0];
    $data = $xml->XMLin($dif_xml);
}

writelog($log,"processing: $source");

my $dbconf = Config::Tiny->read('/etc/griidc/db.ini');

my %dbi_map = ( postgresql => 'Pg:dbname', mysql => 'mysql:database' );

my $griidc_dbh = DBI->connect('DBI:'.$dbi_map{$dbconf->{'GOMRI_RW'}->{'type'}}.'='.$dbconf->{'GOMRI_RW'}->{'dbname'},
                              $dbconf->{'GOMRI_RW'}->{'username'},
                              $dbconf->{'GOMRI_RW'}->{'password'})
                      or die "Couldn't connect to database: " . DBI->errstr;

my $ris_dbh = DBI->connect('DBI:'.$dbi_map{$dbconf->{'RIS_RO'}->{'type'}}.'='.$dbconf->{'RIS_RO'}->{'dbname'},
                           $dbconf->{'RIS_RO'}->{'username'},
                           $dbconf->{'RIS_RO'}->{'password'})
                   or die "Couldn't connect to database: " . DBI->errstr;

my @difCols = ('dataset_uid','task_uid','title','abstract','dataset_type','dataset_for','size','observation','approach','start_date','end_date','geo_location','historic_links','meta_editor','meta_standards','point','national','ethical','remarks','primary_poc','secondary_poc','logname','status','datafor','project_id','dataset_udi');

my $map = Config::Tiny->read('/etc/griidc/dif/misc_map.ini');
$map->{'format'} = Config::Tiny->read('/etc/griidc/dif/format_map.ini');
$map->{'category'} = Config::Tiny->read('/etc/griidc/dif/category_map.ini');
$map->{'procedure'} = Config::Tiny->read('/etc/griidc/dif/procedure_map.ini');
$map->{'transport'} = Config::Tiny->read('/etc/griidc/dif/transport_map.ini');
$map->{'national_data_center'} = Config::Tiny->read('/etc/griidc/dif/national_data_center_map.ini');
$map->{'metadata_standard'} = Config::Tiny->read('/etc/griidc/dif/metadata_standard_map.ini');

my $fc_map = Config::Tiny->read('/etc/griidc/funding_cycles.ini');

my $count = 0;
my $update_count = 0;
my $create_count = 0;
my $dataset_uid = time;

my @create_udis;
my @update_udis;
my @locked_udis;
my @errors;
my $diffs = {};

for my $entry (@{$data->{'entry'}}) {
    my $dif = {};
    $count++;

    # build DIF

    set($dif,'title',$entry->{'dif'}->{'title'});

    set($dif,'abstract',$entry->{'dif'}->{'abstract'});

    setPipeDelimited($dif,'dataset_type',8,$entry->{'dif'}->{'format'},'name',$map,'format');

    setPipeDelimited($dif,'dataset_for',9,$entry->{'dif'}->{'category'},'name',$map,'category');

    set($dif,'size',$map->{'dataset_size'}->{$entry->{'dif'}->{'approximate_size'}});

    set($dif,'observation',$entry->{'dif'}->{'observed_or_generated'});

    setPipeDelimited($dif,'approach',6,$entry->{'dif'}->{'procedure'},'name',$map,'procedure');

    set($dif,'start_date',$entry->{'dif'}->{'period'}->{'start_date'});

    set($dif,'end_date',$entry->{'dif'}->{'period'}->{'end_date'});

    set($dif,'geo_location',$entry->{'dif'}->{'geographic_study_area'}->{'extent'}->{'gml:Polygon'}->{'gml:exterior'}->{'gml:LinearRing'}->{'gml:posList'}->{'content'});
    # change format from poslist to lat,long
    $dif->{'geo_location'} =~ s/(\S+)\s+(\S+)\s+/$1,$2 /g;
    $dif->{'geo_location'} =~ s/(\S+)\s+(\S+)$/$1,$2/g;

    set($dif,'historic_links',$entry->{'dif'}->{'historical_data_references'});

    setPipeDelimited($dif,'meta_standards',5,$entry->{'dif'}->{'metadata'},'standard',$map,'metadata_standard');

    set($dif,'meta_editor',$entry->{'dif'}->{'metadata'}->{'editor'});

    setPipeDelimited($dif,'point',4,$entry->{'dif'}->{'transport'},'method',$map,'transport');

    setPipeDelimited($dif,'national',7,$entry->{'dif'}->{'national_data_center'},'data_center',$map,'national_data_center');

    $dif->{'ethical'} = $map->{'ethical_or_privacy'}->{$entry->{'dif'}->{'ethical_or_privacy'}->{'issues'}} .'|';
    $dif->{'ethical'} .= $entry->{'dif'}->{'ethical_or_privacy'}->{'explain'} if defined $entry->{'dif'}->{'ethical_or_privacy'}->{'explain'};

    set($dif,'remarks',$entry->{'dif'}->{'remarks'});

    set($dif,'primary_poc',$entry->{'dif'}->{'primary_point_of_contact'}->{'id'});

    set($dif,'secondary_poc',$entry->{'dif'}->{'secondary_point_of_contact'}->{'id'});

    set($dif,'logname',$entry->{'dif'}->{'dif_user'}->{'id'});

    set($dif,'editor',$entry->{'dif'}->{'dif_user'}->{'id'});

    # get funding cycle
    # bail out if funding cycle is not set
    unless (defined $entry->{'dif'}->{'funding_cycle'}->{'reference'} and
            length $entry->{'dif'}->{'funding_cycle'}->{'reference'}) {
        my $msg = "Entry $count: funding cycle reference not defined!";
        writelog($log,$msg);
        push @errors, $msg;
        next;
    }
    my $fc = $entry->{'dif'}->{'funding_cycle'}->{'reference'};
    # bail out if funding cycle reference is missing
    unless (defined $fc) {
        my $msg = "Entry $count: missing funding cycle reference!";
        writelog($log,$msg);
        push @errors, $msg;
        next;
    }
    # can't continue processing this DIF entry unless we have a valid funding cycle
    unless (defined $fc_map->{$fc}) {
        my $msg = "Entry $count: invalid funding cycle reference: $fc";
        writelog($log,$msg);
        push @errors, $msg;
        next;
    }

    # get project id directly or by sequence
    $dif->{'project_id'} = $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'id'};
    if (!defined $dif->{'project_id'} or !length $dif->{'project_id'}) {
        # bail out if neither project id nor sequence is set
        unless (defined $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'sequence'} and
                length $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'sequence'}) {
            my $msg = "Entry $count: no project id or sequence found!";
            writelog($log,$msg);
            push @errors, $msg;
            next;
        }
        # look up project id for provided project sequence
        my $pseq = $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'sequence'};
        my $sth = $ris_dbh->prepare('SET @seq=0;');
        $sth->execute();
        my $SQL = 'SELECT Programs_Seq.Program_ID FROM (select @seq:=@seq+1 AS seq,Program_ID FROM Programs WHERE Program_FundSrc = ? ORDER BY Program_ID) AS Programs_Seq WHERE seq = ?;';
        my $sth = $ris_dbh->prepare($SQL) or die "Couldn't prepare statement: " . $ris_dbh->errstr;
        $sth->execute($fc_map->{$fc}->{'RIS_ID'},$pseq);
        my $ref = $sth->fetchrow_hashref();
        $sth->finish();
        # can't continue processing this DIF entry unless we have a project id
        unless ($ref) {
            my $msg = "Entry $count: couldn't find project for Funding Cycle: $fc, Project Sequence: $pseq";
            writelog($log,$msg);
            push @errors, $msg;
            next;
        }
        $dif->{'project_id'} = $ref->{'Program_ID'};
    }

    # get task id directly or by seqeunce
    $dif->{'task_uid'} = $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'task'}->{'id'};
    if (!defined $dif->{'task_uid'} or !length $dif->{'task_uid'}) {
        # bail out if neither task id nor sequence is set
        unless (defined $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'task'}->{'sequence'} and
                length $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'task'}->{'sequence'}) {
            my $msg = "Entry $count: no task id or sequence found!";
            writelog($log,$msg);
            push @errors, $msg;
            next;
        }
        # look up task id for provided task sequence
        my $tseq = $entry->{'dif'}->{'funding_cycle'}->{'project'}->{'task'}->{'sequence'};
        my $SQL = 'SELECT Project_ID FROM Projects WHERE Program_ID = ? AND Project_SubTaskNum = ?;';
        my $sth = $ris_dbh->prepare($SQL) or die "Couldn't prepare statement: " . $ris_dbh->errstr;
        $sth->execute($dif->{'project_id'},$tseq);
        my $ref = $sth->fetchrow_hashref();
        $sth->finish();
        # can't continue processing this DIF entry unless we have a task id
        unless ($ref) {
            my $msg = "Entry $count: couldn't find task for Project ID: $dif->{project_id}, Task Sequence: $tseq";
            writelog($log,$msg);
            push @errors, $msg;
            next;
        }
        $dif->{'task_uid'} = $ref->{'Project_ID'};
    }

    # can't continue processing this DIF entry unless DIF sequence is set
    unless (defined $entry->{'dif'}->{'sequence'} and length $entry->{'dif'}->{'sequence'}) {
        my $msg  = "Entry $count: Missing DIF sequence!";
        writelog($log,$msg);
        push @errors, $msg;
        next;
    };

    # build UDI
    $fc =~ s/^R0/R/;
    $dif->{'dataset_udi'} = sprintf("%s.x%03d.%03d:%04d",$fc,$dif->{'project_id'},$dif->{'task_uid'},$entry->{'dif'}->{'sequence'});

    # check for existing DIF
    my $SQL = 'SELECT * FROM datasets WHERE dataset_udi = ?;';
    my $sth = $griidc_dbh->prepare($SQL) or die "Couldn't prepare statement: " . $griidc_dbh->errstr;
    $sth->execute($dif->{'dataset_udi'});
    my $found = $sth->rows;

    if ($found) {
        # this is an existing DIF
        # get existing values from DB
        my $ref = $sth->fetchrow_hashref();
        $sth->finish();

        # find updates
        my %updates;
        for my $col (@difCols) {
            next if $col eq 'dataset_uid' or $col eq 'status' or $col eq 'logname';
            if ($dif->{$col} ne $ref->{$col}) {
                # save update
                $updates{$col} = $dif->{$col};
                $diffs->{$dif->{'dataset_udi'}}->{$col}->{'griidc'} = $ref->{$col};
                $diffs->{$dif->{'dataset_udi'}}->{$col}->{'published'} = $dif->{$col};
            }
        }

        # if there are updates
        if (%updates) {
            if ($ref->{'status'} != 0) {
                # if DIF is locked, log attemped update
                writelog($log,"attempted update of locked DIF: $dif->{dataset_udi}");
                push @locked_udis, $dif->{'dataset_udi'};
            }
            else {
                # otherwise, proceed with update
                # change status to submitted, but unapproved
                $updates{'status'} = 1;
                for my $col (keys %updates) {
                    my $SQL = "UPDATE datasets SET $col = ? WHERE dataset_udi = ?;";
                    my $sth2 = $griidc_dbh->prepare($SQL) or die "Couldn't prepare statement: " . $griidc_dbh->errstr;
                    $sth2->execute($updates{$col},$dif->{'dataset_udi'}) or die "Couldn't update $dif->{dataset_udi}!";
                    $sth2->finish();
                }
                $update_count++;
                push @update_udis, $dif->{'dataset_udi'};
            }
        }
        # if nothing has changed, do nothing
    }
    else {
        # if this is a new DIF, insert it

        $dif->{'dataset_uid'} = $dataset_uid;
        $dif->{'status'} = 1;

        my $SQL = 'INSERT INTO datasets(' . join(',',@difCols) . ') VALUES (' . join(',',('?') x (@difCols)) . ");";
        my $sth2 = $griidc_dbh->prepare($SQL) or die "Couldn't prepare statement: " . $griidc_dbh->errstr;
        $sth2->execute(map { $dif->{$_} } @difCols[0..(@difCols-1)]) or die "Couldn't execute statement: " . $sth->errstr;
        $sth2->finish();

        $dataset_uid++;
        $create_count++;
        push @create_udis, $dif->{'dataset_udi'};
    }

    $sth->finish();
}

$griidc_dbh->disconnect;
$ris_dbh->disconnect;

writelog($log,"processed $count DIF entries (updated $update_count, created $create_count) in $source");

close($log);

for my $email (keys %{$config->{'notifications'}}) {
    my @types = split /[, ]/, $config->{'notifications'}->{$email};
    my $msg;

    my %mail = ( To      => $email,
                 From    => 'dif-creator@poseidon.tamucc.edu',
                 Subject => "Automated DIF Creator Summary for: $source",
                 Message => '',
                 'content-type' => 'text/html; charset="iso-8859-1"'
               );


    for my $type (@types) {
        if ($type eq 'create' and @create_udis) {
            $mail{'Message'} .= "<h3>Found and Created $create_count new DIF(s):</h3>\n<table>\n";
            for my $udi (@create_udis) {
                $mail{'Message'} .= "  <tr><th colspan='3' style='padding:3px; text-align:left;'>$udi:</th></tr>\n";
            }
            $mail{'Message'} .= "</table>\n";
        }
        if ($type eq 'update' and @update_udis) {
            $mail{'Message'} .= "<h3>Found differences between GRIIDC and Published and updated $update_count DIF(s):</h3>\n\n";
            $mail{'Message'} .= "<table style='border-collapse:collapse;'>\n";
            for my $udi (@update_udis) {
                $mail{'Message'} .= "  <tr><th colspan='3' style='padding:3px; text-align:left;'>$udi:</th></tr>\n";
                $mail{'Message'} .= "  <tr>\n";
                $mail{'Message'} .= "    <th width='6%' style='border: 1px solid black; padding:3px; text-align:center;'></th>\n";
                $mail{'Message'} .= "    <th width='47%' style='border: 1px solid black; padding:3px; text-align:center;'>GRIIDC</th>\n";
                $mail{'Message'} .= "    <th width='47%' style='border: 1px solid black; padding:3px; text-align:center;'>Published</th>\n";
                $mail{'Message'} .= "  </tr>\n";
                for my $col (keys %{$diffs->{$udi}}) {
                    $diffs->{$udi}->{$col}->{'griidc'} =~ s/[\r\n]/<br>\n/g;
                    $diffs->{$udi}->{$col}->{'published'} =~ s/[\r\n]/<br>\n/g;
                    $mail{'Message'} .= "  <tr>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; font-weight:bold; text-align:right;'>$col:</td>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; text-align:left;' valign='top'>$diffs->{$udi}->{$col}->{griidc}</td>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; text-align:left;' valign='top'>$diffs->{$udi}->{$col}->{published}</td>\n";
                    $mail{'Message'} .= "  </tr>\n";
                }
                $mail{'Message'} .= "  <tr><td colspan='3'>&nbsp;</td></tr>\n";
            }
            $mail{'Message'} .= "</table>\n";
        }
        if ($type eq 'locked' and @locked_udis) {
            $mail{'Message'} .= "<h3>Found differences between GRIIDC and Published, but could not update ".scalar(@locked_udis)." locked DIF(s):</h3>\n\n";
            $mail{'Message'} .= "<table style='border-collapse:collapse;'>\n";
            for my $udi (@locked_udis) {
                $mail{'Message'} .= "  <tr><th colspan='3' style='padding:3px; text-align:left;'>$udi:</th></tr>\n";
                $mail{'Message'} .= "  <tr>\n";
                $mail{'Message'} .= "    <th width='6%' style='border: 1px solid black; padding:3px; text-align:center;'></th>\n";
                $mail{'Message'} .= "    <th width='47%' style='border: 1px solid black; padding:3px; text-align:center;'>GRIIDC</th>\n";
                $mail{'Message'} .= "    <th width='47%' style='border: 1px solid black; padding:3px; text-align:center;'>Published</th>\n";
                $mail{'Message'} .= "  </tr>\n";
                for my $col (keys %{$diffs->{$udi}}) {
                    $diffs->{$udi}->{$col}->{'griidc'} =~ s/[\r\n]/<br>\n/g;
                    $diffs->{$udi}->{$col}->{'published'} =~ s/[\r\n]/<br>\n/g;
                    $mail{'Message'} .= "  <tr>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; font-weight:bold; text-align:right;'>$col:</td>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; text-align:left;' valign='top'>$diffs->{$udi}->{$col}->{griidc}</td>\n";
                    $mail{'Message'} .= "    <td style='border: 1px solid black; padding:3px; text-align:left;' valign='top'>$diffs->{$udi}->{$col}->{published}</td>\n";
                    $mail{'Message'} .= "  </tr>\n";
                }
                $mail{'Message'} .= "  <tr><td colspan='3'>&nbsp;</td></tr>\n";
            }
            $mail{'Message'} .= "</table>\n";
        }
        if ($type eq 'error' and @errors) {
            $mail{'Message'} .= "<h3>Errors encountered:</h3><table>";
            for my $error (@errors) {
                $mail{'Message'} .= "  <tr><th colspan='3' style='padding:3px; text-align:left;'>$error:</th></tr>\n";
            }
            $mail{'Message'} .= "</table>\n";
        }
    }
    if (length $mail{'Message'}) {
        my $subject = "Automated DIF Creator Summary for: $source";
        $mail{'Message'} = "<h2>$subject</h2>\n$mail{Message}";
        sendmail(%mail) or die $Mail::Sendmail::error;
    }
}

sub set {
    my ($dif,$key,$val) = @_;
    if (defined $val and length $val) {
        $dif->{$key} = $val;
    }
}

sub setPipeDelimited {
    my ($dif,$key,$length,$element,$namekey,$map,$type) = @_;
    my @ret = ('') x $length;
    my @element;
    if (ref $element eq 'ARRAY') {
        @element = @{$element};
    }
    else {
        @element = ($element);
    }
    for my $val (@element) {
        if (defined $val->{$namekey} and length $val->{$namekey}) {
            if ($val->{$namekey} eq 'other') {
                $ret[$length-1] = $val->{'other'};
            }
            else {
                $ret[$map->{$type}->{$val->{$namekey}}->{'pos'}] = $map->{$type}->{$val->{$namekey}}->{'label'};
            }
        }
    }
    $dif->{$key} = join('|',@ret);
}

sub writelog {
    my ($log,$message) = @_;
    my $ts = POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime);
    print $log "[$ts] $message\n";
}
